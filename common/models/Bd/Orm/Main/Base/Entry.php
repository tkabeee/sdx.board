<?php

require_once 'Bd/Db/Record.php';
require_once 'Bd/Orm/Main/Table/Entry.php';
require_once 'Bd/Orm/Main/Const/Entry.php';

abstract class Bd_Orm_Main_Base_Entry extends Bd_Db_Record
{

    private static $_table_class = null;

    /**
     * @return Bd_Orm_Main_Table_Entry
     */
    public static function getTable()
    {
        if(!self::$_table_class)
        {
            self::$_table_class = new Bd_Orm_Main_Table_Entry();
            self::$_table_class->lock();
        }
        
        
        return self::$_table_class;
    }

    /**
     * @return Bd_Orm_Main_Table_Entry
     */
    protected function _getTable()
    {
        return self::getTable();
    }

    /**
     * @return Bd_Orm_Main_Table_Entry
     */
    public static function createTable()
    {
        return new Bd_Orm_Main_Table_Entry();
    }

    /**
     * @return Bd_Orm_Main_Form_Entry
     */
    public static function createForm(array $except = array())
    {
        return new Bd_Orm_Main_Form_Entry('', array(), $except);
    }

    public function getId()
    {
        return $this->_get('id');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setId($value)
    {
        return $this->_set('id', $value);
    }

    public function getThreadId()
    {
        return $this->_get('thread_id');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setThreadId($value)
    {
        if(isset($this->_relations['Thread']) && $value != $this->getThreadId())
        {
            unset($this->_relations['Thread']);
        }
        
        return $this->_set('thread_id', $value);
    }

    public function getAccountId()
    {
        return $this->_get('account_id');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setAccountId($value)
    {
        if(isset($this->_relations['Account']) && $value != $this->getAccountId())
        {
            unset($this->_relations['Account']);
        }
        
        return $this->_set('account_id', $value);
    }

    public function getBody()
    {
        return $this->_get('body');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setBody($value)
    {
        return $this->_set('body', $value);
    }

    public function getUpdatedAt()
    {
        return $this->_get('updated_at');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setUpdatedAt($value)
    {
        return $this->_set('updated_at', $value);
    }

    public function getCreatedAt()
    {
        return $this->_get('created_at');
    }

    /**
     * @return Bd_Orm_Main_Entry
     */
    public function setCreatedAt($value)
    {
        return $this->_set('created_at', $value);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Account
     */
    public function getAccount($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Account', $this->_relations))
        {
        	$account_id = $this->getAccountId();
        	
        	if($account_id)
        	{
        	   list($select, $db) = $this->_detectGetterArg($arg, 'getAccountSelect');
        		
        	    $table = Bd_Orm_Main_Account::getTable();
        		$select->add('id', $account_id);
        		$record = $table->fetchRow($select);
        	}
        	else
        	{
        		$record = null;
        	}
        	
        	$this->_relations['Account'] = $record;
        }
        
        return $this->_relations['Account'] === null ? Sdx_Null::getInstance() : $this->_relations['Account'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Entry
     */
    public function setAccount(Bd_Orm_Main_Account $record)
    {
        $this->_relation_save = true;
        $record->poolEntry($this);
        
        $this->setAccountId($record->getId());
        
        $this->_relations['Account'] = $record;
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Entry
     */
    public function bindAccount(Bd_Orm_Main_Account $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        $this->_relations['Account'] = $record;
        
        if($record && $oposite)
        {
        	$record->bindEntry($this);
        }
        
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Sdx_Db_Select
     */
    public function getAccountSelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_Account::getTable()->getSelect($db);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Thread
     */
    public function getThread($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Thread', $this->_relations))
        {
        	$thread_id = $this->getThreadId();
        	
        	if($thread_id)
        	{
        	   list($select, $db) = $this->_detectGetterArg($arg, 'getThreadSelect');
        		
        	    $table = Bd_Orm_Main_Thread::getTable();
        		$select->add('id', $thread_id);
        		$record = $table->fetchRow($select);
        	}
        	else
        	{
        		$record = null;
        	}
        	
        	$this->_relations['Thread'] = $record;
        }
        
        return $this->_relations['Thread'] === null ? Sdx_Null::getInstance() : $this->_relations['Thread'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Entry
     */
    public function setThread(Bd_Orm_Main_Thread $record)
    {
        $this->_relation_save = true;
        $record->poolEntry($this);
        
        $this->setThreadId($record->getId());
        
        $this->_relations['Thread'] = $record;
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Entry
     */
    public function bindThread(Bd_Orm_Main_Thread $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        $this->_relations['Thread'] = $record;
        
        if($record && $oposite)
        {
        	$record->bindEntry($this);
        }
        
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Sdx_Db_Select
     */
    public function getThreadSelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_Thread::getTable()->getSelect($db);
    }


}

