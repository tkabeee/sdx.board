<?php

require_once 'Bd/Db/Record.php';
require_once 'Bd/Orm/Main/Table/Thread.php';
require_once 'Bd/Orm/Main/Const/Thread.php';

abstract class Bd_Orm_Main_Base_Thread extends Bd_Db_Record
{

    private static $_table_class = null;

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    public static function getTable()
    {
        if(!self::$_table_class)
        {
            self::$_table_class = new Bd_Orm_Main_Table_Thread();
            self::$_table_class->lock();
        }
        
        
        return self::$_table_class;
    }

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    protected function _getTable()
    {
        return self::getTable();
    }

    /**
     * @return Bd_Orm_Main_Table_Thread
     */
    public static function createTable()
    {
        return new Bd_Orm_Main_Table_Thread();
    }

    /**
     * @return Bd_Orm_Main_Form_Thread
     */
    public static function createForm(array $except = array())
    {
        return new Bd_Orm_Main_Form_Thread('', array(), $except);
    }

    public function getId()
    {
        return $this->_get('id');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setId($value)
    {
        return $this->_set('id', $value);
    }

    public function getGenreId()
    {
        return $this->_get('genre_id');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setGenreId($value)
    {
        if(isset($this->_relations['Genre']) && $value != $this->getGenreId())
        {
            unset($this->_relations['Genre']);
        }
        
        return $this->_set('genre_id', $value);
    }

    public function getTitle()
    {
        return $this->_get('title');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setTitle($value)
    {
        return $this->_set('title', $value);
    }

    public function getCreatedAt()
    {
        return $this->_get('created_at');
    }

    /**
     * @return Bd_Orm_Main_Thread
     */
    public function setCreatedAt($value)
    {
        return $this->_set('created_at', $value);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Genre
     */
    public function getGenre($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Genre', $this->_relations))
        {
        	$genre_id = $this->getGenreId();
        	
        	if($genre_id)
        	{
        	   list($select, $db) = $this->_detectGetterArg($arg, 'getGenreSelect');
        		
        	    $table = Bd_Orm_Main_Genre::getTable();
        		$select->add('id', $genre_id);
        		$record = $table->fetchRow($select);
        	}
        	else
        	{
        		$record = null;
        	}
        	
        	$this->_relations['Genre'] = $record;
        }
        
        return $this->_relations['Genre'] === null ? Sdx_Null::getInstance() : $this->_relations['Genre'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Thread
     */
    public function setGenre(Bd_Orm_Main_Genre $record)
    {
        $this->_relation_save = true;
        $record->poolThread($this);
        
        $this->setGenreId($record->getId());
        
        $this->_relations['Genre'] = $record;
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Bd_Orm_Main_Thread
     */
    public function bindGenre(Bd_Orm_Main_Genre $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        $this->_relations['Genre'] = $record;
        
        if($record && $oposite)
        {
        	$record->bindThread($this);
        }
        
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyOne
     *
     * @return Sdx_Db_Select
     */
    public function getGenreSelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_Genre::getTable()->getSelect($db);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Db_Record_List
     */
    public function getEntryList($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Entry', $this->_relations))
        {
            $id = $this->getId();
        
            if ($id)
            {
                list($select, $db) = $this->_detectGetterArg($arg, 'getEntrySelect');
        	
                $table = Bd_Orm_Main_Entry::getTable();
                $select->add('thread_id', $id, 'entry');
                $records = $table->fetchAll($select);
            
                foreach($records as $record)
                {
                    $record->bindThread($this);
                }
            }
            else
            {
                $records = new Bd_Db_Record_List();
            }
                    
            $this->_relations['Entry'] = $records;
        }
        
        if(isset($this->_tmp_relations['Entry']))
        {
        	$this->_relations['Entry']->mergeList(
        		$this->_tmp_relations['Entry']
        	);
        	
        	$this->_tmp_relations['Entry']->clear();
        }
                
        return $this->_relations['Entry'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function setEntryList($records)
    {
        $this->_relation_save = true;
        
        foreach($records as $key=>$record)
        {
        	$record->setThreadId($this->getId());
            $record->bindThread($this);
        }
        
        if(is_array($records))
        {
        	$records = new Bd_Db_Record_List($records);
        }
        
        $this->_exception_relations['Entry'] = $records;
        $this->_relations['Entry'] = $records;
        if(isset($this->_tmp_relations['Entry']))
        {
        	$this->_tmp_relations['Entry']->clear();
        }
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function bindEntry(Bd_Orm_Main_Entry $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        
        if(!array_key_exists('Entry', $this->_relations))
        {
        	$this->_relations['Entry'] = new Bd_Db_Record_List();
        }
        
        if($record && !($record instanceof Sdx_Null))
        {
        	$this->_relations['Entry']->mergeRecord($record);
        	
        		if($oposite)
        	{
        		$record->bindThread($this);
        	}
        
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Sdx_Db_Select
     */
    public function getEntrySelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_Entry::getTable()->getSelect($db);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function addEntry(Bd_Orm_Main_Entry $record)
    {
        $this->_relation_save = true;
        
        $record->bindThread($this);
        $record->setThreadId($this->getId());
        
        if(isset($this->_relations['Entry']))
        {
        	$this->_relations['Entry']->mergeRecord($record);
        }
        else
        {
        	if(!isset($this->_tmp_relations['Entry']))
        	{
        		$this->_tmp_relations['Entry'] = new Bd_Db_Record_List();
        	}
        	$this->_tmp_relations['Entry']->addRecord($record);
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function poolEntry(Bd_Orm_Main_Entry $record)
    {
        $this->_relation_save = true;
        
        if(!isset($this->_tmp_relations['Entry']))
        {
        	$this->_tmp_relations['Entry'] = new Bd_Db_Record_List();
        }
        
        $this->_tmp_relations['Entry']->addRecord($record);
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Bd_Db_Record_List
     */
    public function getTagList($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('Tag', $this->_relations))
        {
        	if($arg || !array_key_exists('ThreadTag', $this->_relations))
        	{
            	list($select, $db) = $this->_detectGetterArg($arg, 'getTagSelect');
        	
            	$id = $this->getId();
        
            	if($id)
            	{
            		$table = $select->getTable();
            		$select->add('thread_id', $id, $table->getAlias());
            		$middle_records = $table->fetchAll($select);
            	} else {
            		$middle_records = new Bd_Db_Record_List();
            	}
            
            	$this->_relations['ThreadTag'] = $middle_records;
            	if(isset($this->_tmp_relations['ThreadTag']))
        		{
        			$this->_relations['ThreadTag']->mergeList($this->_tmp_relations['ThreadTag']);
        			$this->_tmp_relations['ThreadTag']->clear();
        		}
        	}
        	
        	$records = new Bd_Db_Record_List();
        	foreach($this->_relations['ThreadTag'] as $middle_record)
            {
        		$middle_record->bindThread($this);
        		$records->mergeRecord($middle_record->getTag());
            }
                    
            $this->_relations['Tag'] = $records;
        	
        }
        
        if(isset($this->_tmp_relations['Tag']))
        {
        	$this->_relations['Tag']->mergeList(
        		$this->_tmp_relations['Tag']
        	);
        	
        	$this->_tmp_relations['Tag']->clear();
        }
                
        return $this->_relations['Tag'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function setTagList($records)
    {
        $this->_relation_save = true;
        
        $new_mid_records = new Bd_Db_Record_List();
        foreach($records as $key=>$record)
        {
        	$new_mid_record = new Bd_Orm_Main_ThreadTag();
        	$new_mid_record->setThreadId($this->getId());
        	$new_mid_record->setTagId($record->getId());
        	$new_mid_records->mergeRecord($new_mid_record);
        }
        
        if(is_array($records))
        {
        	$records = new Bd_Db_Record_List($records);
        }
        
        $this->_relations['Tag'] = $records;
        $this->_delete_relations['ThreadTag'] = $new_mid_records;
        $this->_relations['ThreadTag'] = $new_mid_records;
        
        if(isset($this->_tmp_relations['Tag']))
        {
        	$this->_tmp_relations['Tag']->clear();
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function bindTag(Bd_Orm_Main_Tag $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        
        if(!array_key_exists('Tag', $this->_relations))
        {
        	$this->_relations['Tag'] = new Bd_Db_Record_List();
        }
        
        if($record && !($record instanceof Sdx_Null))
        {
        	$this->_relations['Tag']->mergeRecord($record);
        	
        		if($oposite)
        	{
        		$record->bindThread($this);
        	}
        
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Sdx_Db_Select
     */
    public function getTagSelect(Sdx_Db_Adapter $db = null)
    {
        $mid_table = Bd_Orm_Main_ThreadTag::createTable();
        $mid_table->addJoinInner(Bd_Orm_Main_Tag::createTable());
        $select = $mid_table->getSelect($db);
        $mid_table->appendJoin($select);
        
        return $select;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function addTag(Bd_Orm_Main_Tag $record)
    {
        $this->_relation_save = true;
        
        $new_mid_record = new Bd_Orm_Main_ThreadTag();
        $new_mid_record->setThreadId($this->getId());
        $new_mid_record->setTagId($record->getId());
        
        $this->addThreadTag($new_mid_record);
        $record->addThreadTag($new_mid_record);
        
        if(!isset($this->_tmp_relations['Tag']))
        {
        	$this->_tmp_relations['Tag'] = new Bd_Db_Record_List();
        }
        $this->_tmp_relations['Tag']->addRecord($record);
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_ManyMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function poolTag(Bd_Orm_Main_Tag $record)
    {
        $this->_relation_save = true;
        
        if(!isset($this->_tmp_relations['Tag']))
        {
        	$this->_tmp_relations['Tag'] = new Bd_Db_Record_List();
        }
        
        $this->_tmp_relations['Tag']->addRecord($record);
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Db_Record_List
     */
    public function getThreadTagList($arg = null)
    {
        $this->_relation_save = true;
        
        if($arg || !array_key_exists('ThreadTag', $this->_relations))
        {
            $id = $this->getId();
        
            if ($id)
            {
                list($select, $db) = $this->_detectGetterArg($arg, 'getThreadTagSelect');
        	
                $table = Bd_Orm_Main_ThreadTag::getTable();
                $select->add('thread_id', $id, 'thread_tag');
                $records = $table->fetchAll($select);
            
                foreach($records as $record)
                {
                    $record->bindThread($this);
                }
            }
            else
            {
                $records = new Bd_Db_Record_List();
            }
                    
            $this->_relations['ThreadTag'] = $records;
        }
        
        if(isset($this->_tmp_relations['ThreadTag']))
        {
        	$this->_relations['ThreadTag']->mergeList(
        		$this->_tmp_relations['ThreadTag']
        	);
        	
        	$this->_tmp_relations['ThreadTag']->clear();
        }
                
        return $this->_relations['ThreadTag'];
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function setThreadTagList($records)
    {
        $this->_relation_save = true;
        
        foreach($records as $key=>$record)
        {
        	$record->setThreadId($this->getId());
            $record->bindThread($this);
        }
        
        if(is_array($records))
        {
        	$records = new Bd_Db_Record_List($records);
        }
        
        $this->_exception_relations['ThreadTag'] = $records;
        $this->_relations['ThreadTag'] = $records;
        if(isset($this->_tmp_relations['ThreadTag']))
        {
        	$this->_tmp_relations['ThreadTag']->clear();
        }
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function bindThreadTag(Bd_Orm_Main_ThreadTag $record = null, $oposite = false)
    {
        $this->_relation_save = true;
        
        if(!array_key_exists('ThreadTag', $this->_relations))
        {
        	$this->_relations['ThreadTag'] = new Bd_Db_Record_List();
        }
        
        if($record && !($record instanceof Sdx_Null))
        {
        	$this->_relations['ThreadTag']->mergeRecord($record);
        	
        		if($oposite)
        	{
        		$record->bindThread($this);
        	}
        
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Sdx_Db_Select
     */
    public function getThreadTagSelect(Sdx_Db_Adapter $db = null)
    {
        return Bd_Orm_Main_ThreadTag::getTable()->getSelect($db);
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function addThreadTag(Bd_Orm_Main_ThreadTag $record)
    {
        $this->_relation_save = true;
        
        $record->bindThread($this);
        $record->setThreadId($this->getId());
        
        if(isset($this->_relations['ThreadTag']))
        {
        	$this->_relations['ThreadTag']->mergeRecord($record);
        }
        else
        {
        	if(!isset($this->_tmp_relations['ThreadTag']))
        	{
        		$this->_tmp_relations['ThreadTag'] = new Bd_Db_Record_List();
        	}
        	$this->_tmp_relations['ThreadTag']->addRecord($record);
        }
        
        return $this;
    }

    /**
     * Generated by Sdx_Generator_Model_Relation_OneMany
     *
     * @return Bd_Orm_Main_Thread
     */
    public function poolThreadTag(Bd_Orm_Main_ThreadTag $record)
    {
        $this->_relation_save = true;
        
        if(!isset($this->_tmp_relations['ThreadTag']))
        {
        	$this->_tmp_relations['ThreadTag'] = new Bd_Db_Record_List();
        }
        
        $this->_tmp_relations['ThreadTag']->addRecord($record);
        return $this;
    }


}

